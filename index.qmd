---
title: "Exploring Class Overlap in Classification Challenges: Introducing the R Package"
author: "Priyanga Dilini Talagala"
subtitle: "useR! 2024, Salzburg, Austria"
footer: "Slides created with Quarto, available at prital.netlify.app."
date: 07/09/2024
date-format: long
# logo: images/logo.png
editor: source
execute:
  eval: true
  echo: false
  warning: false
  error: false
  message: false   
format:
  revealjs:
    code-copy: hover
    code-overflow: scroll
    highlightLines: true
    multiplex: false
    embed-resources: true
    controls: auto
    progress: true
    history: true
    hash-type: number    
    slide-number: c
    show-slide-number: all  
    menu:
      side: right
      width: normal
      numbers: true
    # chalkboard:
    #   theme: chalkboard
    #   src: drawings.json
      read-only: false
title-slide-attributes:
  data-background-image: images/logo.png
  data-background-opacity: "1"
  data-background-size: 15%
  data-background-position: 98% 50%
  data-background-color: "#b8f5f3"
  # data-background-image: grid-worms/bird.webp
  # background-iframe: grid-worms/index.html
css: style.css
preload-iframes: true
---



## {background-color="white"
background-image="images/img1.png" 
background-size="80%"
background-position="70% 80%,center"} 

Data Quality Problems 

```{r}
#| eval: false

library(naniar)
library(tidyverse)
library(patchwork)

set.seed(123)

p1 <- ggplot(airquality, 
       aes(x = Solar.R, 
           y = Ozone)) + 
  theme(aspect.ratio = 1) +
  geom_miss_point()+
    ggplot2::labs(title = "Missing Data") +
      scale_color_manual(values = c("#FF0000", "#0000FF")) 

library(stray)
set.seed(1234)
n <- 1000 # number of observations
nout <- 10 # number of outliers
typical_data <- matrix(rnorm(2*n), ncol = 2, byrow = TRUE)
out <- matrix(5*runif(2*nout,min=-5,max=5), ncol = 2, byrow = TRUE)
data <- rbind(out, typical_data )
outliers <- find_HDoutliers(data, knnsearchtype = "brute")
p2 <- display_HDoutliers(data, outliers) +
  ggplot2::labs(title = "Outliers")

# Imbalance
class1 <- matrix(rnorm(50, mean = 0, sd = 0.5), ncol = 2) 
class2 <- matrix(rnorm(400, mean = 3, sd = 1), ncol = 2) 
datanew <- rbind(class1, class2)
training <- data.frame(datanew)|>
  mutate(class = as_factor(c(rep(1, 25), rep(2, 200))))

# Plot the dummy data to visualize overlaps
p3 <- ggplot2::ggplot(training, ggplot2::aes(x = X1, y = X2, color = class)) +
ggplot2::geom_point() +
   theme(aspect.ratio = 1) +
ggplot2::labs(title = "Class Imbalance Problem") +
     scale_color_manual(values = c("#FF0000", "#0000FF")) 

## Class overlapping problem
library(clap)
class1 <- matrix(rnorm(400, mean = 0, sd = 1), ncol = 2) + matrix(rep(c(1, 1), each = 200), ncol = 2)
class2 <- matrix(rnorm(400, mean = 0, sd = 1), ncol = 2) + matrix(rep(c(-0.5, -0.5), each = 200), ncol = 2)
datanew <- rbind(class1, class2)
training <- data.frame(datanew,
class = factor(c(rep(1, 200), rep(2,200))))

# Plot the dummy data to visualize overlaps
p4 <- ggplot2::ggplot(training, ggplot2::aes(x = X1, y = X2, color = class)) +
ggplot2::geom_point() +
   theme(aspect.ratio = 1) +
ggplot2::labs(title = "Overlapping Classes") +
     scale_color_manual(values = c("#FF0000", "#0000FF"))
print(p4)

p <- (p1|p2)/(p3|p4)
print(p)

```

## Class Overlapping Problem

- Class overlap occurs when instances of more than one class share a common region in the data space and are not clearly separable

## Class Overlapping Problem

- Class overlap occurs when instances of more than one class share a common region in the data space and are not clearly separable

- This overlap can happen due to:

  - **Inherent Similarity**: Natural similarity between classes
  

   
   

## Class Overlapping Problem

- Class overlap occurs when instances of more than one class share a common region in the data space and are not clearly separable

- This overlap can happen due to:

  - **Inherent Similarity**: Natural similarity between classes
  
  - **Noise**: Variability or errors in data collection
   
  

## Class Overlapping Problem

- Class overlap occurs when instances of more than one class share a common region in the data space and are not clearly separable

- This overlap can happen due to:

  - **Inherent Similarity**: Natural similarity between classes
  
  - **Noise**: Variability or errors in data collection

  - **Feature Representation**: Insufficient or inadequate features to separate classes


## Implications of Class Overlap

-  Classifiers struggle to correctly classify instances due to overlapping regions


## Implications of Class Overlap

-  Classifiers struggle to correctly classify instances due to overlapping regions 

-  Higher error rates occur in areas where classes overlap, leading to more instances being misclassified 


## Implications of Class Overlap

-  Classifiers struggle to correctly classify instances due to overlapping regions 

-  Higher error rates occur in areas where classes overlap, leading to more instances being misclassified 

- If the problem of class overlap is not addressed, models may become overly complex, leading to overfitting issues where the model performs well on training data but poorly on unseen data 


## Types of Class Overlapping Problems

```{r fig2, out.width="100%"}
# Load required libraries
library(tidyverse)
library(patchwork)

# Set seed for reproducibility
set.seed(123)

# noise_data 

class1 <- matrix(rnorm(400, mean = 0, sd = 1), ncol = 2) + matrix(rep(c(1, 1), each = 200), ncol = 2)
class2 <- matrix(rnorm(400, mean = 0, sd = 1), ncol = 2) + matrix(rep(c(-0.5, -0.5), each = 200), ncol = 2)
datanew <- rbind(class1, class2)
noise_data <- data.frame(datanew,
y = factor(c(rep(1, 200), rep(2,190), rep(1,10))))

#boundary_data

class1 <- matrix(rnorm(2000, mean = 0, sd = 1), ncol = 2) 
class2 <- matrix(rnorm(2000, mean = 2.5, sd = 1), ncol = 2) 
datanew <- rbind(class1, class2)
boundary_data <- data.frame(datanew,
y = factor(c(rep(1, 1000), rep(2,1000))))


#localized_data

class1 <- matrix(rnorm(2000, mean = 0, sd = 1), ncol = 2) 
class2 <- matrix(rnorm(2000, mean = 2.5, sd = 1), ncol = 2) 
class3 <- matrix(rnorm(200, mean = -1, sd = 0.25), ncol = 2) 
datanew <- rbind(class1, class2, class3)
localized_data <- data.frame(datanew,
y = factor(c(rep(1, 1000), rep(2,1000), rep(2,100))))


#full_data

class1 <- matrix(rnorm(2000, mean = 0, sd = 1), ncol = 2) 
class2 <- matrix(rnorm(2000, mean = 0, sd = 1), ncol = 2) 
datanew <- rbind(class1, class2)
full_data <- data.frame(datanew,
y = factor(c(rep(1, 1000), rep(2,1000))))

# Plotting function
plot_data <- function(data, title) {
  p <- ggplot(data, aes(x = X1, y = X2, color = y)) +
    geom_point(size = 2, alpha = 0.5) +
    scale_color_manual(values = c("#FF0000", "#0000FF"), labels = c("0", "1")) +
    theme_minimal() +
      theme(aspect.ratio = 1) +
    labs(title = title, x = "X1", y = "X2", color = "Class")
  return(p)
}

# Create plots for each scenario
plot_noise <- plot_data(noise_data, "Noise (Random Overlap)")
plot_boundary <- plot_data(boundary_data, "Boundary Overlap")
plot_localized <- plot_data(localized_data, "Localized Overlap")
plot_full <- plot_data(full_data, "Full Overlap")

# Combine plots
p <- (plot_noise| plot_boundary)/(  plot_localized| plot_full)
print(p)
```


## `clap` R Package 
### Detecting <span style="color:red">C</span>lass Over<span style="color:red">LAP</span>ping Regions in Multidimensional Data

![](images/logo.png){ fig-align="center" width=20%}

`install.packages('clap')`

`devtools::install_github("pridiltal/clap")`


## 

:::: {.columns}

::: {.column width="50%"}

`clap` Framework

</br>

- Normalize the columns of the data. (median and IQR)

- This prevents variables with large variances having disproportional influence on Euclidean distances.

```{r fig4, out.width="100%"}
library(clap)
library(tidyverse)
set.seed(568)
class1 <- matrix(rnorm(100, mean = 0, sd = 1), ncol = 2) 
class2 <- matrix(rnorm(100, mean = 1.5, sd = 1), ncol = 2)
datanew <- rbind(class1, class2)
training <- data.frame(datanew,
class = factor(c(rep(1, 50), rep(2, 50))))

# Plot the dummy data to visualize overlaps
p <- ggplot2::ggplot(training, ggplot2::aes(x = X1, y = X2, color = class)) +
ggplot2::geom_point(size = 5) +
ggplot2::labs(title = "Dummy Data with Overlapping Classes") +
    theme(aspect.ratio = 1, text = element_text(size = 24)) +
       scale_color_manual(values = c("#FF0000", "#0000FF"))
```
:::

::: {.column width="50%"}

```{r fig5, fig.height = 15}
print(p)
```

:::

::::

## 

:::: {.columns}

::: {.column width="50%"}

`clap` Framework

</br>

- Leader Algorithm (Hartingan, 1975)

- Calculate the nearest neighbor distances


```{r fig6a, out.width="100%"}
library(clap)
library(tidyverse)
library(ggforce)

# Plot the dummy data to visualize overlaps
p <- ggplot2::ggplot(training, ggplot2::aes(x = X1, y = X2) ) +
ggplot2::geom_point(size = 5, colour= "black") +
ggplot2::labs(title = "Dummy Data with Overlapping Classes") +
    theme(aspect.ratio = 1, text = element_text(size = 24)) 
  

```
:::

::: {.column width="50%"}

```{r fig7a, fig.height = 15}
print(p)
```

:::

::::

## 

:::: {.columns}

::: {.column width="50%"}

`clap` Framework

</br>

- Leader Algorithm (Hartingan, 1975)

- Calculate the nearest neighbor distances

- Performs clustering using a radius based on the maximum nearest neighbor distance

```{r fig6, out.width="100%"}
library(clap)
library(tidyverse)
library(ggforce)

# Plot the dummy data to visualize overlaps
p <- ggplot2::ggplot(training, ggplot2::aes(x = X1, y = X2) ) +
ggplot2::geom_point(size = 5, colour= "gray") +
ggplot2::labs(title = "Dummy Data with Overlapping Classes") +
    theme(aspect.ratio = 1, text = element_text(size = 24)) 

 # Perform clustering
cluster_result <- perform_clustering(training, class_column = class)

index<- unlist(lapply( cluster_result$members, `[[`, 1))
# Compute the pairwise distance matrix
distance_matrix <- as.matrix(dist(training))
# Function to find the nearest neighbor distance for each point
nearest_neighbor_distance <- function(distances) {
  # Exclude the distance to itself (which is zero)
  min(distances[distances != 0])
}
# Apply the function to each row of the distance matrix
nn_distances <- apply(distance_matrix, 1, nearest_neighbor_distance)
r =  max(nn_distances)
#r= max(nn_distances) 
circle_data <- training[index, ]
exemplar <- lapply(cluster_result$members, `[[`, 1) |> as_vector()
exemplar_data <- training[exemplar, ]
p1 <-  p +
   geom_circle(data = circle_data, aes(x0 = X1, y0 = X2, r = r), alpha = 1, colour = "red") +
  geom_point(data = exemplar_data, aes(x = X1, y = X2), size =5,  color = "black" ) 
  

```
:::

::: {.column width="50%"}

```{r fig7, fig.height = 15}
print(p1)
```

:::

::::

## 

:::: {.columns}

::: {.column width="50%"}

`clap` Framework

</br>

```{r}
#| eval: false
#| echo: true
cluster_result <-
  clap::perform_clustering(
    data, 
    class_column = class)
```



```{r fig8, out.width="100%"}
library(clap)
library(tidyverse)
library(ggforce)

# Plot the dummy data to visualize overlaps
p <- ggplot2::ggplot(training, ggplot2::aes(x = X1, y = X2) ) +
ggplot2::geom_point(size = 5, colour= "gray") +
ggplot2::labs(title = "Dummy Data with Overlapping Classes") +
    theme(aspect.ratio = 1, text = element_text(size = 24)) 

 # Perform clustering
cluster_result <- perform_clustering(training, class_column = class)

index<- unlist(lapply( cluster_result$members, `[[`, 1))
# Compute the pairwise distance matrix
distance_matrix <- as.matrix(dist(training))
# Function to find the nearest neighbor distance for each point
nearest_neighbor_distance <- function(distances) {
  # Exclude the distance to itself (which is zero)
  min(distances[distances != 0])
}
# Apply the function to each row of the distance matrix
nn_distances <- apply(distance_matrix, 1, nearest_neighbor_distance)
r =  max(nn_distances)
#r= max(nn_distances) 
circle_data <- training[index, ]
exemplar <- lapply(cluster_result$members, `[[`, 1) |> as_vector()
exemplar_data <- training[exemplar, ]
p1 <-  p +
   geom_circle(data = circle_data, aes(x0 = X1, y0 = X2, r = r), alpha = 1, colour = "red") +
  geom_point(data = exemplar_data, aes(x = X1, y = X2), size =5,  color = "black" ) 
  

```
:::

::: {.column width="50%"}

```{r fig9, fig.height = 15}
print(p1)
```

:::

::::


## 

:::: {.columns}

::: {.column width="50%"}

`clap` Framework

</br>


```{r}
#| eval: false
#| echo: true
cluster_result <-
  clap::perform_clustering(
    data, 
    class_column = class)

composition <- 
  clap::compute_cluster_composition(
  cluster_result)
```

- Computes cluster composition

```{r fig10, out.width="100%"}
library(clap)
library(tidyverse)
library(ggforce)

# Plot the dummy data to visualize overlaps
p <- ggplot2::ggplot(training, ggplot2::aes(x = X1, y = X2) ) +
ggplot2::geom_point(size = 5, colour= "gray") +
ggplot2::labs(title = "Dummy Data with Overlapping Classes") +
    theme(aspect.ratio = 1, text = element_text(size = 24)) 

 # Perform clustering
cluster_result <- perform_clustering(training, class_column = class)

index<- unlist(lapply( cluster_result$members, `[[`, 1))
# Compute the pairwise distance matrix
distance_matrix <- as.matrix(dist(training))
# Function to find the nearest neighbor distance for each point
nearest_neighbor_distance <- function(distances) {
  # Exclude the distance to itself (which is zero)
  min(distances[distances != 0])
}
# Apply the function to each row of the distance matrix
nn_distances <- apply(distance_matrix, 1, nearest_neighbor_distance)
r =  max(nn_distances)
#r= max(nn_distances) 
circle_data <- training[index, ]
exemplar <- lapply(cluster_result$members, `[[`, 1) |> as_vector()
exemplar_data <- training[exemplar, ]
p1 <-  p +
   geom_circle(data = circle_data, aes(x0 = X1, y0 = X2, r = r), alpha = 1, colour = "red") +
  geom_point(data = exemplar_data, aes(x = X1, y = X2), size =5,  color = "black" ) +
  geom_point(data = training, aes(x = X1, y = X2, color = class), size =5, ) +
        scale_color_manual(values = c("#FF0000", "#0000FF"))
  

```
:::

::: {.column width="50%"}

```{r fig11, fig.height = 15}
print(p1)
```

:::

::::

## 

:::: {.columns}

::: {.column width="50%"}

`clap` Framework

</br>


```{r}
#| eval: false
#| echo: true
cluster_result <-
  clap::perform_clustering(
    data, 
    class_column = class)

composition <- 
  clap::compute_cluster_composition(
  cluster_result)

ids_vector <- 
  clap::extract_ids_vector(
  composition) 
```

- Extract IDs

```{r fig12, out.width="100%"}
library(clap)
library(tidyverse)
library(ggforce)

# Plot the dummy data to visualize overlaps
p <- ggplot2::ggplot(training, ggplot2::aes(x = X1, y = X2) ) +
ggplot2::geom_point(size = 5, colour= "gray") +
ggplot2::labs(title = "Dummy Data with Overlapping Classes") +
    theme(aspect.ratio = 1, text = element_text(size = 24)) 

 # Perform clustering
cluster_result <- perform_clustering(training, class_column = class)

index<- unlist(lapply( cluster_result$members, `[[`, 1))
# Compute the pairwise distance matrix
distance_matrix <- as.matrix(dist(training))
# Function to find the nearest neighbor distance for each point
nearest_neighbor_distance <- function(distances) {
  # Exclude the distance to itself (which is zero)
  min(distances[distances != 0])
}
# Apply the function to each row of the distance matrix
nn_distances <- apply(distance_matrix, 1, nearest_neighbor_distance)
r =  max(nn_distances)
#r= max(nn_distances) 
circle_data <- training[index, ]
exemplar <- lapply(cluster_result$members, `[[`, 1) |> as_vector()
exemplar_data <- training[exemplar, ]

composition <- 
  compute_cluster_composition(
  cluster_result)

ids_vector <- extract_ids_vector(
  composition)

# Subset data based on extracted IDs
overlapdata <- training[ids_vector, ]
p1 <-  p +
  geom_point(data = training, aes(x = X1, y = X2, color = class), size =5, ) +
        scale_color_manual(values = c("#FF0000", "#0000FF"))

  p2 <- p1 +
  ggplot2::geom_point(data = overlapdata, ggplot2::aes(X1, X2), colour = "black", size = 5)
  
p<- p1/p2
```
:::

::: {.column width="50%"}

```{r fig13, fig.height = 15}
print(p)
```

:::

::::

## 

Case Study 1: Biopsy Data on Breast Cancer Patients


:::: {.columns}

::: {.column width="50%"}

- clump thickness

- uniformity of cell size

- uniformity of cell shape

- marginal adhesion

- single epithelial cell size

- bare nuclei (16 values are missing)

- bland chromatin

- normal nucleoli

- mitoses

:::

::: {.column width="50%"}

Classification Task

- Benign tumor - generally do not invade and spread

- Malignant tumor cells are more likely to spread to other areas of the body. 
:::

::::


## {background-color="white"
background-image="images/biopsy1.png" 
background-size="70%"
background-position="50% 50%,center"} 


## {background-color="white"
background-image="images/biopsy2.png" 
background-size="70%"
background-position="50% 50%,center"} 


## {background-color="white"
background-image="images/biopsy3.png" 
background-size="70%"
background-position="50% 50%,center"} 


## {background-color="white"
background-image="images/biopsy4.png" 
background-size="70%"
background-position="50% 50%,center"} 


## {background-color="white"
background-image="images/biopsy5.png" 
background-size="70%"
background-position="50% 50%,center"} 


## {background-color="white"
background-image="images/biopsy6.png" 
background-size="70%"
background-position="50% 50%,center"} 

## Detecting Class Overlapping Instances of Image databases


- Aim: detect early stages of pneumonia through chest x-ray images

- Inaccurate analysis of the x-ray results may result in an improper diagnosis and decision making, resulting in a costly mistake that could otherwise save lives

- Linearized chest x-rays images

## {background-color="white"
background-image="images/xray1.png" 
background-size="70%"
background-position="50% 50%,center"} 

Images of Class "Pneumonia"

## {background-color="white"
background-image="images/xray2.png" 
background-size="70%"
background-position="50% 50%,center"} 

Images of Class "Normal"

## {background-color="white"
background-image="images/xray3.png" 
background-size="70%"
background-position="50% 50%,center"} 

## {background-color="white"
background-image="images/xray4.png" 
background-size="70%"
background-position="50% 50%,center"} 

## {background-color="white"
background-image="images/xray5.png" 
background-size="70%"
background-position="50% 50%,center"} 

## {background-color="white"
background-image="images/GIGO.jpg" 
background-size="70%"
background-position="50% 50%,center"} 

## What Next?

- The Leader Algorithm determined cluster size using the maximum nearest neighbor distance. Further analysis is needed to identify the optimal cluster size.



## What Next?

- The Leader Algorithm determined cluster size using the maximum nearest neighbor distance. Further analysis is needed to identify the optimal cluster size.

- Euclidean distance was used in the Leader Algorithm to determine cluster size. Additional experiments are required to find faster distance calculation methods.


## What Next?

- The Leader Algorithm determined cluster size using the maximum nearest neighbor distance. Further analysis is needed to identify the optimal cluster size.

- Euclidean distance was used in the Leader Algorithm to determine cluster size. Additional experiments are required to find faster distance calculation methods.

- Further analysis is needed to identify classification methods that are robust to class overlapping instances.


## What Next?

- The Leader Algorithm determined cluster size using the maximum nearest neighbor distance. Further analysis is needed to identify the optimal cluster size.

- Euclidean distance was used in the Leader Algorithm to determine cluster size. Additional experiments are required to find faster distance calculation methods.

- Further analysis is needed to identify classification methods that are robust to class overlapping instances.

- Further analysis is required to assess the overlapping status of unseen test data in the high-dimensional feature space.


## Thank you {style="text-align: center;"}


This work was supported in part by the RETINA research lab, funded by the OWSD, a program unit of the United Nations Educational, Scientific, and Cultural Organization (UNESCO).

Slides available at: prital.netlify.app

![](images/QR.png){fig-align="center" width=25}